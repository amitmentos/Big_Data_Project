# docker-compose.yml - Main orchestration file

services:
  # MinIO S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: ecommerce-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
      MINIO_REGION: us-east-1
      MINIO_DOMAIN: minio
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s

  # Create MinIO buckets
  minio-init:
    image: minio/mc:latest
    container_name: ecommerce-minio-init
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minio minio123;
      /usr/bin/mc mb myminio/warehouse || true;
      /usr/bin/mc mb myminio/bronze || true;
      /usr/bin/mc mb myminio/silver || true;
      /usr/bin/mc mb myminio/gold || true;
      /usr/bin/mc policy set public myminio/warehouse || true;
      /usr/bin/mc policy set public myminio/bronze || true;
      /usr/bin/mc policy set public myminio/silver || true;
      /usr/bin/mc policy set public myminio/gold || true;
      exit 0;
      "
    networks:
      - ecommerce-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ecommerce-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ecommerce-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Kafka topic initialization
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ecommerce-kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --replication-factor 1 --partitions 4 --topic user_activity_events &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --replication-factor 1 --partitions 4 --topic marketplace_sales &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --replication-factor 1 --partitions 1 --topic __test_topic &&
        echo 'Successfully created Kafka topics'
      "
    networks:
      - ecommerce-network

  # Spark Master
  spark-master:
    build: ./processing
    container_name: ecommerce-spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=us-east-1
      - MINIO_ENDPOINT=http://minio:9000
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./processing/spark-apps:/opt/spark-apps
      - ./processing/jars:/opt/spark/jars
      - ./processing:/opt/processing
      - ./processing/config:/opt/spark/conf
    networks:
      - ecommerce-network

  # Spark Worker
  spark-worker:
    build: ./processing
    container_name: ecommerce-spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=us-east-1
      - MINIO_ENDPOINT=http://minio:9000
    depends_on:
      - spark-master
    volumes:
      - ./processing/spark-apps:/opt/spark-apps
      - ./processing/jars:/opt/spark/jars
      - ./processing:/opt/processing
      - ./processing/config:/opt/spark/conf
    networks:
      - ecommerce-network

  # PostgreSQL for Airflow metadata
  postgres:
    image: postgres:13
    container_name: ecommerce-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Airflow
  redis:
    image: redis:7.0
    container_name: ecommerce-redis
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Airflow Webserver
  airflow-webserver:
    build: ./orchestration
    container_name: ecommerce-airflow-webserver
    command: webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: 'xooYaWxO5L7noHSS10HypEfeX/6N2/lL9cliqIznwi0='
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__SECRET_KEY: 'a-very-secret-key'
      AIRFLOW__CORE__PARALLELISM: '16'
      AIRFLOW__CORE__DAG_CONCURRENCY: '8'
      AIRFLOW__SCHEDULER__MAX_THREADS: '4'
      AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: '60'
      # Add AWS/MinIO environment variables
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      AWS_REGION: us-east-1
      MINIO_ENDPOINT: http://minio:9000
    volumes:
      - ./orchestration/dags:/opt/airflow/dags
      - ./orchestration/logs:/opt/airflow/logs
      - ./orchestration/plugins:/opt/airflow/plugins
      - ./orchestration/config:/opt/airflow/config
      - ./processing:/opt/processing
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - postgres
      - redis
    networks:
      - ecommerce-network

  # Airflow Scheduler
  airflow-scheduler:
    build: ./orchestration
    container_name: ecommerce-airflow-scheduler
    command: scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: 'xooYaWxO5L7noHSS10HypEfeX/6N2/lL9cliqIznwi0='
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      # Scheduler-specific configuration
      AIRFLOW__SCHEDULER__JOB_HEARTBEAT_SEC: '20'
      AIRFLOW__SCHEDULER__SCHEDULER_HEARTBEAT_SEC: '10'
      AIRFLOW__SCHEDULER__RUN_DURATION: '60'
      AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: '60'
      AIRFLOW__SCHEDULER__PARSING_PROCESSES: '4'
      AIRFLOW__SCHEDULER__MAX_DAGRUNS_PER_LOOP_TO_SCHEDULE: '20'
      AIRFLOW__CORE__PARALLELISM: '16'
      AIRFLOW__CORE__MAX_ACTIVE_TASKS_PER_DAG: '8'
      AIRFLOW__CORE__DAG_CONCURRENCY: '8'
      # Add AWS/MinIO environment variables
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      AWS_REGION: us-east-1
      MINIO_ENDPOINT: http://minio:9000
    volumes:
      - ./orchestration/dags:/opt/airflow/dags
      - ./orchestration/logs:/opt/airflow/logs
      - ./orchestration/plugins:/opt/airflow/plugins
      - ./orchestration/config:/opt/airflow/config
      - ./processing:/opt/processing
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname $${HOSTNAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - postgres
      - redis
    networks:
      - ecommerce-network

  # Airflow Worker
  airflow-worker:
    build: ./orchestration
    container_name: ecommerce-airflow-worker
    command: worker
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: 'xooYaWxO5L7noHSS10HypEfeX/6N2/lL9cliqIznwi0='
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      # Worker-specific configuration
      AIRFLOW__CELERY__WORKER_CONCURRENCY: '8'
      AIRFLOW__CELERY__BROKER_CONNECTION_TIMEOUT: '120'
      AIRFLOW__CELERY__WORKER_PREFETCH_MULTIPLIER: '1'
      AIRFLOW__CELERY__WORKER_AUTOSCALE: '8,4'
      AIRFLOW__CELERY__WORKER_LOST_WAIT_TIMEOUT: '120'
      # Add AWS/MinIO environment variables
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      AWS_REGION: us-east-1
      MINIO_ENDPOINT: http://minio:9000
    volumes:
      - ./orchestration/dags:/opt/airflow/dags
      - ./orchestration/logs:/opt/airflow/logs
      - ./orchestration/plugins:/opt/airflow/plugins
      - ./orchestration/config:/opt/airflow/config
      - ./processing:/opt/processing
    healthcheck:
      test: ["CMD-SHELL", "celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d celery@$${HOSTNAME} || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - postgres
      - redis
      - airflow-webserver
    networks:
      - ecommerce-network

  # Kafka Producers
  kafka-producers:
    build: ./streaming/producers
    container_name: ecommerce-kafka-producers
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    volumes:
      - ./streaming/producers:/app
    command: python user_activity_producer.py
    networks:
      - ecommerce-network

volumes:
  minio_data:
  postgres_data:

networks:
  ecommerce-network:
    driver: bridge
